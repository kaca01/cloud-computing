# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: back2021
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '3'
	
plugins:
  - serverless-iam-roles-per-function
  - serverless-step-functions

provider:
  name: aws
  runtime: python3.8
  # Deployment stage
  stage: dev
  # Deplotment region
  region: eu-central-1
  # Global memory configuration (default 1024MB)
  memorySize: 128 #ovo je najmanja vrednost koju mozemo da dodelimo
  # Function timeout in seconds (default 6s)
  timeout: 10

# you can define service wide environment variables here
  environment:
    TABLE_NAME:
      Ref: filesTable
    BUCKET_NAME:
      Ref: filesBucket
    SQS_NAME:
      Ref: filesSQSQueue
    SHARED_TABLE_NAME:
      Ref: sharedContentTable
    USERS_TABLE_NAME:
      Ref: familyUsersTable

# you can add packaging information here
package:
  # Create separate zip for each Lambda function
  individually: true
  patterns:
    # Exclude everything (each Lambda will specify which directory should be included)
    # To exclude use '!' prefix
    - '!**/**'
    # Include utility directory for every Lambda function
    - 'utility/**'

functions:
  storageFile:
    handler: uploadFile/upload_file.storage_file
    package:
      include: 'uploadFile/**'
    environment:
      UPLOAD_TOPIC: !Ref UploadFileTopic
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:PutObject
        Resource: "arn:aws:s3:::serverlessfilebucket2021/*"
      - Effect: Allow
        Action:
          - sqs:SendMessage
        Resource: 
          - "Fn::GetAtt": [filesSQSQueue, Arn]
      - Effect: Allow
        Action:
          - sns:Publish
        Resource:
          - "*"
      - Effect: Allow
        Action:
          - ses:GetIdentityVerificationAttributes
        Resource: 
          - "*"
    events:
      # REST API endpoint of API Gateway
      - http:
          # Path for this endpoint
          path: upload
          # HTTP method for this endpoint
          method: post
          # Enable CORS. Don't forget to return the right header in your response
          cors: true
  storageMetadata:
    handler: uploadFile/upload_file.storage_metadata
    package:
      include: 'uploadFile/**'
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource:
          - "Fn::GetAtt": [filesTable, Arn]
    events:
      - sqs:
          arn: { "Fn::GetAtt": [filesSQSQueue, Arn] }
          batchSize: 1
  sendEmail:
    handler: notification/send_email.lambda_handler
    package:
      include: 'notification/**'
    iamRoleStatements:
      - Effect: Allow
        Action:
          - ses:SendEmail
        Resource: 
          - "*"
    events:
      - sns:
          arn: !Ref UploadFileTopic
          topicName: upload-file
      - sns:
          arn: !Ref EditFileTopic
          topicName: edit-file
      - sns:
          arn: !Ref DeleteFileTopic
          topicName: delete-file
    
  sendVerificationEmail:
    handler: verification/verification_email.lambda_handler
    package:
      include: 'verification/**'
    iamRoleStatements:
      - Effect: Allow
        Action:
          - ses:SendEmail
        Resource: 
          - "*"
      - Effect: Allow
        Action:
          - ses:VerifyEmailIdentity
        Resource: 
          - "*"
    events:
      # REST API endpoint of API Gateway
      - http:
          # Path for this endpoint
          path: sendVerificationEmail
          # HTTP method for this endpoint
          method: post
          # Enable CORS. Don't forget to return the right header in your response
          cors: true
  create_folder:
    runtime: python3.8
    handler: create_folder/create_folder.create_folder
    package:
      # Include 'createDogs' directory and all child directories
      include: 'create_folder/**'
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:PutObject
        Resource: "arn:aws:s3:::serverlessfilebucket2021/*"
    events:
      # REST API endpoint of API Gateway
      - http:
          # Path for this endpoint
          path: create-folder
          # HTTP method for this endpoint
          method: post
          # Enable CORS. Don't forget to return the right header in your response
          cors: true
  accessContent:
    handler: accessContent/folder_contents.lambda_handler
    package:
      include: 'accessContent/**'
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:ListBucket
        Resource: "arn:aws:s3:::serverlessfilebucket2021"
      - Effect: Allow
        Action:
          - s3:GetObject
        Resource: "arn:aws:s3:::serverlessfilebucket2021"
    events:
      - http:
          path: content/{name}
          method: get
          cors: true
          request:
            parameters:
              paths:
                name: true
  downloadFile:
    handler: downloadFile/download_file.lambda_handler
    package:
      include: 'downloadFile/**'
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:GetObject
        Resource: "arn:aws:s3:::serverlessfilebucket2021/*"
    events:
      - http:
          path: download
          method: get
          cors: true
  editFile:
    handler: editFile/edit_file.lambda_handler
    package:
      include: 'editFile/**'
    environment:
      EDIT_TOPIC: !Ref EditFileTopic
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:GetObject
          - s3:PutObject
        Resource: "arn:aws:s3:::serverlessfilebucket2021/*"
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource:
          - "Fn::GetAtt": [filesTable, Arn]
      - Effect: Allow
        Action:
          - sns:Publish
        Resource:
          - "*"
      - Effect: Allow
        Action:
          - ses:GetIdentityVerificationAttributes
        Resource: 
          - "*"
    events:
      - http:
          path: edit
          method: post
          cors: true
  deleteFolder:
    handler: deleteFolder/deleteFolder.lambda_handler
    package:
      # Include 'createDogs' directory and all child directories
      include: 'deleteFolder/**'
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:GetObject
          - s3:GetObjectAcl
          - s3:DeleteObject
          - s3:ListObjectsV2
          - s3:ListBucket
          - s3:ListBucketVersions
        Resource: 
          - "arn:aws:s3:::serverlessfilebucket2021/*"
          - "arn:aws:s3:::serverlessfilebucket2021"
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource:
          - "Fn::GetAtt": [filesTable, Arn]
    events:
      # REST API endpoint of API Gateway
      - http:
          # Path for this endpoint
          path: deleteFolder
          # HTTP method for this endpoint
          method: delete
          # Enable CORS. Don't forget to return the right header in your response
          cors: true
  deleteFile:
    handler: deleteFile/delete_file.lambda_handler
    package:
      # Include 'createDogs' directory and all child directories
      include: 'deleteFile/**'
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:GetObject
          - s3:GetObjectAcl
          - s3:DeleteObject
          - s3:ListObjectsV2
          - s3:ListBucket
          - s3:ListBucketVersions
        Resource: 
          - "arn:aws:s3:::serverlessfilebucket2021/*"
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource:
          - "Fn::GetAtt": [filesTable, Arn]
    events:
      # REST API endpoint of API Gateway
      - http:
          # Path for this endpoint
          path: deleteFile
          # HTTP method for this endpoint
          method: delete
          # Enable CORS. Don't forget to return the right header in your response
          cors: true
  addPermission:
    handler: addPermission/add_permission.lambda_handler
    package:
      include: 'addPermission/**'
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:eu-central-1:522114191780:table/shared_content2021
    events:
      - http:
          # Path for this endpoint
          path: addPermission
          # HTTP method for this endpoint
          method: put
          # Enable CORS. Don't forget to return the right header in your response
          cors: true
  seePermission:
    handler: seePermission/see_permission.lambda_handler
    package:
      include: 'seePermission/**'
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:eu-central-1:522114191780:table/shared_content2021
    events:
      - http:
          # Path for this endpoint
          path: seePermission
          # HTTP method for this endpoint
          method: get
          # Enable CORS. Don't forget to return the right header in your response
          cors: true
  getSharedContent:
    handler: getSharedContent/get_shared_content.lambda_handler
    package:
      include: 'getSharedContent/**'
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:Scan
        Resource: arn:aws:dynamodb:eu-central-1:522114191780:table/shared_content2021
    events:
      - http:
          # Path for this endpoint
          path: getSharedContent
          # HTTP method for this endpoint
          method: get
          # Enable CORS. Don't forget to return the right header in your response
          cors: true
  fileDetails:
    runtime: python3.8
    handler: fileDetails/file_details.lambda_handler
    package:
      include: 'fileDetails/**'
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:eu-central-1:522114191780:table/serverlessfiletable2021
    events:
      # REST API endpoint of API Gateway
      - http:
          # Path for this endpoint
          path: file-details/{name}
          # HTTP method for this endpoint
          method: get
          # Enable CORS. Don't forget to return the right header in your response
          cors: true
          request:
            parameters:
              paths:
                name: true
  inviteMember:
    handler: inviteMember/invite_member.lambda_handler
    package:
      include: 'inviteMember/**'
    iamRoleStatements:
      - Effect: Allow
        Action:
          - ses:SendEmail
        Resource: "*"
    events:
      - http:
          # Path for this endpoint
          path: inviteMember
          # HTTP method for this endpoint
          method: put
          # Enable CORS. Don't forget to return the right header in your response
          cors: true
  getFamilyMember:
    handler: getFamilyMember/get_family_member.lambda_handler
    package:
      include: 'getFamilyMember/**'
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:eu-central-1:522114191780:table/family_users2021
    events:
      - http:
          # Path for this endpoint
          path: getFamilyMember/{email}
          # HTTP method for this endpoint
          method: get
          # Enable CORS. Don't forget to return the right header in your response
          cors: true
  lambdaToStartStepFunction:
    handler: lambdaStepFunction/lambda_step_function.lambda_handler
    package:
      include: 'lambdaStepFunction/**'
    iamRoleStatements:
      - Effect: Allow
        Action:
          - states:StartExecution
          - states:DescribeExecution
        Resource: 
          - arn:aws:states:eu-central-1:522114191780:stateMachine:familyMemberSignup2021
          - "*"
    events:
      - http:
          # Path for this endpoint
          path: familyMemberSignup
          # HTTP method for this endpoint
          method: put
          # Enable CORS. Don't forget to return the right header in your response
          cors: true
  validatefamilyMemberSignup:
    handler: validateFamilySignup/validate_family_signup.lambda_handler
    package:
      include: 'validateFamilySignup/**'
    iamRoleStatements:
      - Effect: Allow
        Action:
          - cognito-idp:AdminGetUser
        Resource: arn:aws:cognito-idp:eu-central-1:522114191780:userpool/eu-central-1_0X24Fz6lx
  createFamilyUser:
    handler: createFamilyUser/create_family_user.lambda_handler
    package:
      include: 'createFamilyUser/**'
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:eu-central-1:522114191780:table/family_users2021
  sendFamilyVerification:
    handler: sendFamilyVerification/send_family_verification.lambda_handler
    package:
      include: 'sendFamilyVerification/**'
    iamRoleStatements:
      - Effect: Allow
        Action:
          - ses:SendEmail
        Resource:
          - "*"

# AWS StepFunctions
stepFunctions:
  # State machine defines one proccess
  stateMachines:
    # Invokation name
    firstStepFunction:
      name: 'familyMemberSignup2021'
      # Holds all information about a stepFunction
      definition:
        Comment: "Family memeber step function"
        # Point of entry state
        StartAt: validatefamilyMemberSignup
        # All states
        States:
          # State key
          validatefamilyMemberSignup:
            # State type
            Type: Task
            # AWS Resource that executes the state (Lambda, SNS, SQS, DynamoDB,...)
            Resource: "arn:aws:lambda:eu-central-1:522114191780:function:back2021-dev-validatefamilyMemberSignup"
            Catch:
              - ErrorEquals: [UserNotFoundError]
                Next: HandleUserNotFoundError
              - ErrorEquals: [EmailTakenError]
                Next: HandleEmailTakenError
            # Next state to go to when finished
            Next: createUser
          HandleUserNotFoundError:
            Type: Fail
            Error: "UserNotFoundError"
            Cause: "The email of the user that invited you does not exist!"
          HandleEmailTakenError:
            Type: Fail
            Error: "EmailTakenError"
            Cause: "The email already exists! Choose another one!"
          createUser:
            Type: Task
            Resource: "arn:aws:lambda:eu-central-1:522114191780:function:back2021-dev-createFamilyUser"
            # Is end state
            Next: sendVerification
          sendVerification:
            Type: Task
            Resource: "arn:aws:lambda:eu-central-1:522114191780:function:back2021-dev-sendFamilyVerification"
            # Is end state
            End: true

# you can add CloudFormation resource templates here
resources:
  Parameters:
    EmailSES:
      Type: String
      Default: arn:aws:ses:eu-central-1:522114191780:identity/anastasijas557@gmail.com

  Resources:
    filesBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: serverlessfilebucket2021
    filesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: serverlessfiletable2021
        AttributeDefinitions:
          - AttributeName: fileName
            AttributeType: S
        KeySchema:
          - AttributeName: fileName
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    filesSQSQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: queue2021

    UploadFileTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: upload-file2021

    EditFileTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: edit-file2021

    DeleteFileTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: delete-file2021
    sharedContentTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: shared_content2021
        AttributeDefinitions:
          - AttributeName: documentName
            AttributeType: S
        KeySchema:
          - AttributeName: documentName
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    familyUsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: family_users2021
        AttributeDefinitions:
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: email
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
